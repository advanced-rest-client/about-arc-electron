/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/AboutArcElectron.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html} from 'lit-element';

import {ArcSettingsBase} from '@advanced-rest-client/arc-settings-panel/src/ArcSettingsBase.js';

export {AboutArcElectron};

declare namespace UiElements {

  /**
   * `about-arc-electron`
   *
   * About screen for ARC electron
   */
  class AboutArcElectron extends ArcSettingsBase {
    readonly updateDownloaded: any;
    readonly updateProgress: any;
    readonly isError: any;

    /**
     * Current version of the application
     */
    appVersion: string|null|undefined;

    /**
     * page of the update status label
     */
    updateStatePage: number|null|undefined;

    /**
     * State of auto update setting.
     */
    autoUpdate: boolean|null|undefined;

    /**
     * Associated message with current error code.
     */
    errorMessage: string|null|undefined;
    errorCode: string|null|undefined;

    /**
     * Current release channel.
     */
    releaseChannel: string|null|undefined;

    /**
     * Enables compatibility with Anypoint platform
     */
    compatibility: boolean|null|undefined;

    /**
     * Enables Material Design Outlined inputs
     */
    outlined: boolean|null|undefined;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): any;
    _setSettings(values: any): void;
    _processValues(values: any): any;
    _settingsChanged(key: any, value: any): void;
    _titleTemplate(): any;
    _updateLabel(): any;
    _channelsTemplate(): any;
    _updatesSettingsTemplate(): any;
    _errorTemplate(): any;
    _autoHandler(e: any): void;
    _autoUpdateChanged(value: any): void;
    _checkingUpdateHandler(): void;
    _updateAvailableHandler(): void;
    _downloadingHandler(): void;
    _updateNotAvailableHandler(): void;
    _updateErrorHandler(e: any, err: any): void;
    _downloadedHandler(): void;
    _createErrorMessage(code: any, message: any): void;
    updateCheck(): void;
    updateInstall(): void;
    openNotes(e: any): void;

    /**
     * Checks if `channel` is a valid channel signature.
     */
    isValidChannel(channel: String|null): Boolean|null;
    _releaseChannelChanged(e: any): void;
  }
}
